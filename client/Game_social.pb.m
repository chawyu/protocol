// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Game_social.pb.h"
// @@protoc_insertion_point(imports)

@implementation GameSocialRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [GameSocialRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface player_info ()
@property (strong) NSString* pid;
@property (strong) NSString* name;
@property (strong) NSString* headUrl;
@property UInt32 sex;
@end

@implementation player_info

- (BOOL) hasPid {
  return !!hasPid_;
}
- (void) setHasPid:(BOOL) _value_ {
  hasPid_ = !!_value_;
}
@synthesize pid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasHeadUrl {
  return !!hasHeadUrl_;
}
- (void) setHasHeadUrl:(BOOL) _value_ {
  hasHeadUrl_ = !!_value_;
}
@synthesize headUrl;
- (BOOL) hasSex {
  return !!hasSex_;
}
- (void) setHasSex:(BOOL) _value_ {
  hasSex_ = !!_value_;
}
@synthesize sex;
- (instancetype) init {
  if ((self = [super init])) {
    self.pid = @"";
    self.name = @"";
    self.headUrl = @"";
    self.sex = 0;
  }
  return self;
}
static player_info* defaultplayer_infoInstance = nil;
+ (void) initialize {
  if (self == [player_info class]) {
    defaultplayer_infoInstance = [[player_info alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultplayer_infoInstance;
}
- (instancetype) defaultInstance {
  return defaultplayer_infoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPid) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasHeadUrl) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPid) {
    [output writeString:1 value:self.pid];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasHeadUrl) {
    [output writeString:3 value:self.headUrl];
  }
  if (self.hasSex) {
    [output writeUInt32:4 value:self.sex];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPid) {
    size_ += computeStringSize(1, self.pid);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasHeadUrl) {
    size_ += computeStringSize(3, self.headUrl);
  }
  if (self.hasSex) {
    size_ += computeUInt32Size(4, self.sex);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (player_info*) parseFromData:(NSData*) data {
  return (player_info*)[[[player_info builder] mergeFromData:data] build];
}
+ (player_info*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (player_info*)[[[player_info builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (player_info*) parseFromInputStream:(NSInputStream*) input {
  return (player_info*)[[[player_info builder] mergeFromInputStream:input] build];
}
+ (player_info*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (player_info*)[[[player_info builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (player_info*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (player_info*)[[[player_info builder] mergeFromCodedInputStream:input] build];
}
+ (player_info*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (player_info*)[[[player_info builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (player_infoBuilder*) builder {
  return [[player_infoBuilder alloc] init];
}
+ (player_infoBuilder*) builderWithPrototype:(player_info*) prototype {
  return [[player_info builder] mergeFrom:prototype];
}
- (player_infoBuilder*) builder {
  return [player_info builder];
}
- (player_infoBuilder*) toBuilder {
  return [player_info builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pid", self.pid];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasHeadUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"headUrl", self.headUrl];
  }
  if (self.hasSex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sex", [NSNumber numberWithInteger:self.sex]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPid) {
    [dictionary setObject: self.pid forKey: @"pid"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasHeadUrl) {
    [dictionary setObject: self.headUrl forKey: @"headUrl"];
  }
  if (self.hasSex) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sex] forKey: @"sex"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[player_info class]]) {
    return NO;
  }
  player_info *otherMessage = other;
  return
      self.hasPid == otherMessage.hasPid &&
      (!self.hasPid || [self.pid isEqual:otherMessage.pid]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasHeadUrl == otherMessage.hasHeadUrl &&
      (!self.hasHeadUrl || [self.headUrl isEqual:otherMessage.headUrl]) &&
      self.hasSex == otherMessage.hasSex &&
      (!self.hasSex || self.sex == otherMessage.sex) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPid) {
    hashCode = hashCode * 31 + [self.pid hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasHeadUrl) {
    hashCode = hashCode * 31 + [self.headUrl hash];
  }
  if (self.hasSex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sex] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface player_infoBuilder()
@property (strong) player_info* resultPlayerInfo;
@end

@implementation player_infoBuilder
@synthesize resultPlayerInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultPlayerInfo = [[player_info alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultPlayerInfo;
}
- (player_infoBuilder*) clear {
  self.resultPlayerInfo = [[player_info alloc] init];
  return self;
}
- (player_infoBuilder*) clone {
  return [player_info builderWithPrototype:resultPlayerInfo];
}
- (player_info*) defaultInstance {
  return [player_info defaultInstance];
}
- (player_info*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (player_info*) buildPartial {
  player_info* returnMe = resultPlayerInfo;
  self.resultPlayerInfo = nil;
  return returnMe;
}
- (player_infoBuilder*) mergeFrom:(player_info*) other {
  if (other == [player_info defaultInstance]) {
    return self;
  }
  if (other.hasPid) {
    [self setPid:other.pid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasHeadUrl) {
    [self setHeadUrl:other.headUrl];
  }
  if (other.hasSex) {
    [self setSex:other.sex];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (player_infoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (player_infoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPid:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setHeadUrl:[input readString]];
        break;
      }
      case 32: {
        [self setSex:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasPid {
  return resultPlayerInfo.hasPid;
}
- (NSString*) pid {
  return resultPlayerInfo.pid;
}
- (player_infoBuilder*) setPid:(NSString*) value {
  resultPlayerInfo.hasPid = YES;
  resultPlayerInfo.pid = value;
  return self;
}
- (player_infoBuilder*) clearPid {
  resultPlayerInfo.hasPid = NO;
  resultPlayerInfo.pid = @"";
  return self;
}
- (BOOL) hasName {
  return resultPlayerInfo.hasName;
}
- (NSString*) name {
  return resultPlayerInfo.name;
}
- (player_infoBuilder*) setName:(NSString*) value {
  resultPlayerInfo.hasName = YES;
  resultPlayerInfo.name = value;
  return self;
}
- (player_infoBuilder*) clearName {
  resultPlayerInfo.hasName = NO;
  resultPlayerInfo.name = @"";
  return self;
}
- (BOOL) hasHeadUrl {
  return resultPlayerInfo.hasHeadUrl;
}
- (NSString*) headUrl {
  return resultPlayerInfo.headUrl;
}
- (player_infoBuilder*) setHeadUrl:(NSString*) value {
  resultPlayerInfo.hasHeadUrl = YES;
  resultPlayerInfo.headUrl = value;
  return self;
}
- (player_infoBuilder*) clearHeadUrl {
  resultPlayerInfo.hasHeadUrl = NO;
  resultPlayerInfo.headUrl = @"";
  return self;
}
- (BOOL) hasSex {
  return resultPlayerInfo.hasSex;
}
- (UInt32) sex {
  return resultPlayerInfo.sex;
}
- (player_infoBuilder*) setSex:(UInt32) value {
  resultPlayerInfo.hasSex = YES;
  resultPlayerInfo.sex = value;
  return self;
}
- (player_infoBuilder*) clearSex {
  resultPlayerInfo.hasSex = NO;
  resultPlayerInfo.sex = 0;
  return self;
}
@end

@interface apply_friend ()
@property (strong) NSString* fid;
@property (strong) NSString* msg;
@end

@implementation apply_friend

- (BOOL) hasFid {
  return !!hasFid_;
}
- (void) setHasFid:(BOOL) _value_ {
  hasFid_ = !!_value_;
}
@synthesize fid;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.fid = @"";
    self.msg = @"";
  }
  return self;
}
static apply_friend* defaultapply_friendInstance = nil;
+ (void) initialize {
  if (self == [apply_friend class]) {
    defaultapply_friendInstance = [[apply_friend alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultapply_friendInstance;
}
- (instancetype) defaultInstance {
  return defaultapply_friendInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFid) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFid) {
    [output writeString:1 value:self.fid];
  }
  if (self.hasMsg) {
    [output writeString:2 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFid) {
    size_ += computeStringSize(1, self.fid);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(2, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (apply_friend*) parseFromData:(NSData*) data {
  return (apply_friend*)[[[apply_friend builder] mergeFromData:data] build];
}
+ (apply_friend*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (apply_friend*)[[[apply_friend builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (apply_friend*) parseFromInputStream:(NSInputStream*) input {
  return (apply_friend*)[[[apply_friend builder] mergeFromInputStream:input] build];
}
+ (apply_friend*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (apply_friend*)[[[apply_friend builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (apply_friend*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (apply_friend*)[[[apply_friend builder] mergeFromCodedInputStream:input] build];
}
+ (apply_friend*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (apply_friend*)[[[apply_friend builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (apply_friendBuilder*) builder {
  return [[apply_friendBuilder alloc] init];
}
+ (apply_friendBuilder*) builderWithPrototype:(apply_friend*) prototype {
  return [[apply_friend builder] mergeFrom:prototype];
}
- (apply_friendBuilder*) builder {
  return [apply_friend builder];
}
- (apply_friendBuilder*) toBuilder {
  return [apply_friend builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fid", self.fid];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFid) {
    [dictionary setObject: self.fid forKey: @"fid"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[apply_friend class]]) {
    return NO;
  }
  apply_friend *otherMessage = other;
  return
      self.hasFid == otherMessage.hasFid &&
      (!self.hasFid || [self.fid isEqual:otherMessage.fid]) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFid) {
    hashCode = hashCode * 31 + [self.fid hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface apply_friendBuilder()
@property (strong) apply_friend* resultApplyFriend;
@end

@implementation apply_friendBuilder
@synthesize resultApplyFriend;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultApplyFriend = [[apply_friend alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultApplyFriend;
}
- (apply_friendBuilder*) clear {
  self.resultApplyFriend = [[apply_friend alloc] init];
  return self;
}
- (apply_friendBuilder*) clone {
  return [apply_friend builderWithPrototype:resultApplyFriend];
}
- (apply_friend*) defaultInstance {
  return [apply_friend defaultInstance];
}
- (apply_friend*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (apply_friend*) buildPartial {
  apply_friend* returnMe = resultApplyFriend;
  self.resultApplyFriend = nil;
  return returnMe;
}
- (apply_friendBuilder*) mergeFrom:(apply_friend*) other {
  if (other == [apply_friend defaultInstance]) {
    return self;
  }
  if (other.hasFid) {
    [self setFid:other.fid];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (apply_friendBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (apply_friendBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFid:[input readString]];
        break;
      }
      case 18: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFid {
  return resultApplyFriend.hasFid;
}
- (NSString*) fid {
  return resultApplyFriend.fid;
}
- (apply_friendBuilder*) setFid:(NSString*) value {
  resultApplyFriend.hasFid = YES;
  resultApplyFriend.fid = value;
  return self;
}
- (apply_friendBuilder*) clearFid {
  resultApplyFriend.hasFid = NO;
  resultApplyFriend.fid = @"";
  return self;
}
- (BOOL) hasMsg {
  return resultApplyFriend.hasMsg;
}
- (NSString*) msg {
  return resultApplyFriend.msg;
}
- (apply_friendBuilder*) setMsg:(NSString*) value {
  resultApplyFriend.hasMsg = YES;
  resultApplyFriend.msg = value;
  return self;
}
- (apply_friendBuilder*) clearMsg {
  resultApplyFriend.hasMsg = NO;
  resultApplyFriend.msg = @"";
  return self;
}
@end

@interface apply_friend_ack ()
@property UInt32 code;
@property (strong) NSString* codeMsg;
@end

@implementation apply_friend_ack

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasCodeMsg {
  return !!hasCodeMsg_;
}
- (void) setHasCodeMsg:(BOOL) _value_ {
  hasCodeMsg_ = !!_value_;
}
@synthesize codeMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = 0;
    self.codeMsg = @"";
  }
  return self;
}
static apply_friend_ack* defaultapply_friend_ackInstance = nil;
+ (void) initialize {
  if (self == [apply_friend_ack class]) {
    defaultapply_friend_ackInstance = [[apply_friend_ack alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultapply_friend_ackInstance;
}
- (instancetype) defaultInstance {
  return defaultapply_friend_ackInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeUInt32:1 value:self.code];
  }
  if (self.hasCodeMsg) {
    [output writeString:2 value:self.codeMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeUInt32Size(1, self.code);
  }
  if (self.hasCodeMsg) {
    size_ += computeStringSize(2, self.codeMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (apply_friend_ack*) parseFromData:(NSData*) data {
  return (apply_friend_ack*)[[[apply_friend_ack builder] mergeFromData:data] build];
}
+ (apply_friend_ack*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (apply_friend_ack*)[[[apply_friend_ack builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (apply_friend_ack*) parseFromInputStream:(NSInputStream*) input {
  return (apply_friend_ack*)[[[apply_friend_ack builder] mergeFromInputStream:input] build];
}
+ (apply_friend_ack*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (apply_friend_ack*)[[[apply_friend_ack builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (apply_friend_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (apply_friend_ack*)[[[apply_friend_ack builder] mergeFromCodedInputStream:input] build];
}
+ (apply_friend_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (apply_friend_ack*)[[[apply_friend_ack builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (apply_friend_ackBuilder*) builder {
  return [[apply_friend_ackBuilder alloc] init];
}
+ (apply_friend_ackBuilder*) builderWithPrototype:(apply_friend_ack*) prototype {
  return [[apply_friend_ack builder] mergeFrom:prototype];
}
- (apply_friend_ackBuilder*) builder {
  return [apply_friend_ack builder];
}
- (apply_friend_ackBuilder*) toBuilder {
  return [apply_friend_ack builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasCodeMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeMsg", self.codeMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasCodeMsg) {
    [dictionary setObject: self.codeMsg forKey: @"codeMsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[apply_friend_ack class]]) {
    return NO;
  }
  apply_friend_ack *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasCodeMsg == otherMessage.hasCodeMsg &&
      (!self.hasCodeMsg || [self.codeMsg isEqual:otherMessage.codeMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasCodeMsg) {
    hashCode = hashCode * 31 + [self.codeMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface apply_friend_ackBuilder()
@property (strong) apply_friend_ack* resultApplyFriendAck;
@end

@implementation apply_friend_ackBuilder
@synthesize resultApplyFriendAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultApplyFriendAck = [[apply_friend_ack alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultApplyFriendAck;
}
- (apply_friend_ackBuilder*) clear {
  self.resultApplyFriendAck = [[apply_friend_ack alloc] init];
  return self;
}
- (apply_friend_ackBuilder*) clone {
  return [apply_friend_ack builderWithPrototype:resultApplyFriendAck];
}
- (apply_friend_ack*) defaultInstance {
  return [apply_friend_ack defaultInstance];
}
- (apply_friend_ack*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (apply_friend_ack*) buildPartial {
  apply_friend_ack* returnMe = resultApplyFriendAck;
  self.resultApplyFriendAck = nil;
  return returnMe;
}
- (apply_friend_ackBuilder*) mergeFrom:(apply_friend_ack*) other {
  if (other == [apply_friend_ack defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasCodeMsg) {
    [self setCodeMsg:other.codeMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (apply_friend_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (apply_friend_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readUInt32]];
        break;
      }
      case 18: {
        [self setCodeMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultApplyFriendAck.hasCode;
}
- (UInt32) code {
  return resultApplyFriendAck.code;
}
- (apply_friend_ackBuilder*) setCode:(UInt32) value {
  resultApplyFriendAck.hasCode = YES;
  resultApplyFriendAck.code = value;
  return self;
}
- (apply_friend_ackBuilder*) clearCode {
  resultApplyFriendAck.hasCode = NO;
  resultApplyFriendAck.code = 0;
  return self;
}
- (BOOL) hasCodeMsg {
  return resultApplyFriendAck.hasCodeMsg;
}
- (NSString*) codeMsg {
  return resultApplyFriendAck.codeMsg;
}
- (apply_friend_ackBuilder*) setCodeMsg:(NSString*) value {
  resultApplyFriendAck.hasCodeMsg = YES;
  resultApplyFriendAck.codeMsg = value;
  return self;
}
- (apply_friend_ackBuilder*) clearCodeMsg {
  resultApplyFriendAck.hasCodeMsg = NO;
  resultApplyFriendAck.codeMsg = @"";
  return self;
}
@end

@interface notify_apply_friend ()
@property (strong) NSString* applyId;
@property (strong) NSString* name;
@property (strong) NSString* imgUrl;
@property (strong) NSString* msg;
@end

@implementation notify_apply_friend

- (BOOL) hasApplyId {
  return !!hasApplyId_;
}
- (void) setHasApplyId:(BOOL) _value_ {
  hasApplyId_ = !!_value_;
}
@synthesize applyId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasImgUrl {
  return !!hasImgUrl_;
}
- (void) setHasImgUrl:(BOOL) _value_ {
  hasImgUrl_ = !!_value_;
}
@synthesize imgUrl;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.applyId = @"";
    self.name = @"";
    self.imgUrl = @"";
    self.msg = @"";
  }
  return self;
}
static notify_apply_friend* defaultnotify_apply_friendInstance = nil;
+ (void) initialize {
  if (self == [notify_apply_friend class]) {
    defaultnotify_apply_friendInstance = [[notify_apply_friend alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultnotify_apply_friendInstance;
}
- (instancetype) defaultInstance {
  return defaultnotify_apply_friendInstance;
}
- (BOOL) isInitialized {
  if (!self.hasApplyId) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasApplyId) {
    [output writeString:1 value:self.applyId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasImgUrl) {
    [output writeString:3 value:self.imgUrl];
  }
  if (self.hasMsg) {
    [output writeString:4 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasApplyId) {
    size_ += computeStringSize(1, self.applyId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasImgUrl) {
    size_ += computeStringSize(3, self.imgUrl);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(4, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (notify_apply_friend*) parseFromData:(NSData*) data {
  return (notify_apply_friend*)[[[notify_apply_friend builder] mergeFromData:data] build];
}
+ (notify_apply_friend*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (notify_apply_friend*)[[[notify_apply_friend builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (notify_apply_friend*) parseFromInputStream:(NSInputStream*) input {
  return (notify_apply_friend*)[[[notify_apply_friend builder] mergeFromInputStream:input] build];
}
+ (notify_apply_friend*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (notify_apply_friend*)[[[notify_apply_friend builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (notify_apply_friend*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (notify_apply_friend*)[[[notify_apply_friend builder] mergeFromCodedInputStream:input] build];
}
+ (notify_apply_friend*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (notify_apply_friend*)[[[notify_apply_friend builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (notify_apply_friendBuilder*) builder {
  return [[notify_apply_friendBuilder alloc] init];
}
+ (notify_apply_friendBuilder*) builderWithPrototype:(notify_apply_friend*) prototype {
  return [[notify_apply_friend builder] mergeFrom:prototype];
}
- (notify_apply_friendBuilder*) builder {
  return [notify_apply_friend builder];
}
- (notify_apply_friendBuilder*) toBuilder {
  return [notify_apply_friend builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasApplyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyId", self.applyId];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasImgUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgUrl", self.imgUrl];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasApplyId) {
    [dictionary setObject: self.applyId forKey: @"applyId"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasImgUrl) {
    [dictionary setObject: self.imgUrl forKey: @"imgUrl"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[notify_apply_friend class]]) {
    return NO;
  }
  notify_apply_friend *otherMessage = other;
  return
      self.hasApplyId == otherMessage.hasApplyId &&
      (!self.hasApplyId || [self.applyId isEqual:otherMessage.applyId]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasImgUrl == otherMessage.hasImgUrl &&
      (!self.hasImgUrl || [self.imgUrl isEqual:otherMessage.imgUrl]) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasApplyId) {
    hashCode = hashCode * 31 + [self.applyId hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasImgUrl) {
    hashCode = hashCode * 31 + [self.imgUrl hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface notify_apply_friendBuilder()
@property (strong) notify_apply_friend* resultNotifyApplyFriend;
@end

@implementation notify_apply_friendBuilder
@synthesize resultNotifyApplyFriend;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNotifyApplyFriend = [[notify_apply_friend alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNotifyApplyFriend;
}
- (notify_apply_friendBuilder*) clear {
  self.resultNotifyApplyFriend = [[notify_apply_friend alloc] init];
  return self;
}
- (notify_apply_friendBuilder*) clone {
  return [notify_apply_friend builderWithPrototype:resultNotifyApplyFriend];
}
- (notify_apply_friend*) defaultInstance {
  return [notify_apply_friend defaultInstance];
}
- (notify_apply_friend*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (notify_apply_friend*) buildPartial {
  notify_apply_friend* returnMe = resultNotifyApplyFriend;
  self.resultNotifyApplyFriend = nil;
  return returnMe;
}
- (notify_apply_friendBuilder*) mergeFrom:(notify_apply_friend*) other {
  if (other == [notify_apply_friend defaultInstance]) {
    return self;
  }
  if (other.hasApplyId) {
    [self setApplyId:other.applyId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasImgUrl) {
    [self setImgUrl:other.imgUrl];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (notify_apply_friendBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (notify_apply_friendBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setApplyId:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setImgUrl:[input readString]];
        break;
      }
      case 34: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasApplyId {
  return resultNotifyApplyFriend.hasApplyId;
}
- (NSString*) applyId {
  return resultNotifyApplyFriend.applyId;
}
- (notify_apply_friendBuilder*) setApplyId:(NSString*) value {
  resultNotifyApplyFriend.hasApplyId = YES;
  resultNotifyApplyFriend.applyId = value;
  return self;
}
- (notify_apply_friendBuilder*) clearApplyId {
  resultNotifyApplyFriend.hasApplyId = NO;
  resultNotifyApplyFriend.applyId = @"";
  return self;
}
- (BOOL) hasName {
  return resultNotifyApplyFriend.hasName;
}
- (NSString*) name {
  return resultNotifyApplyFriend.name;
}
- (notify_apply_friendBuilder*) setName:(NSString*) value {
  resultNotifyApplyFriend.hasName = YES;
  resultNotifyApplyFriend.name = value;
  return self;
}
- (notify_apply_friendBuilder*) clearName {
  resultNotifyApplyFriend.hasName = NO;
  resultNotifyApplyFriend.name = @"";
  return self;
}
- (BOOL) hasImgUrl {
  return resultNotifyApplyFriend.hasImgUrl;
}
- (NSString*) imgUrl {
  return resultNotifyApplyFriend.imgUrl;
}
- (notify_apply_friendBuilder*) setImgUrl:(NSString*) value {
  resultNotifyApplyFriend.hasImgUrl = YES;
  resultNotifyApplyFriend.imgUrl = value;
  return self;
}
- (notify_apply_friendBuilder*) clearImgUrl {
  resultNotifyApplyFriend.hasImgUrl = NO;
  resultNotifyApplyFriend.imgUrl = @"";
  return self;
}
- (BOOL) hasMsg {
  return resultNotifyApplyFriend.hasMsg;
}
- (NSString*) msg {
  return resultNotifyApplyFriend.msg;
}
- (notify_apply_friendBuilder*) setMsg:(NSString*) value {
  resultNotifyApplyFriend.hasMsg = YES;
  resultNotifyApplyFriend.msg = value;
  return self;
}
- (notify_apply_friendBuilder*) clearMsg {
  resultNotifyApplyFriend.hasMsg = NO;
  resultNotifyApplyFriend.msg = @"";
  return self;
}
@end

@interface notify_answer_friend ()
@property (strong) NSString* pid;
@property UInt32 answer;
@property (strong) NSString* msg;
@end

@implementation notify_answer_friend

- (BOOL) hasPid {
  return !!hasPid_;
}
- (void) setHasPid:(BOOL) _value_ {
  hasPid_ = !!_value_;
}
@synthesize pid;
- (BOOL) hasAnswer {
  return !!hasAnswer_;
}
- (void) setHasAnswer:(BOOL) _value_ {
  hasAnswer_ = !!_value_;
}
@synthesize answer;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.pid = @"";
    self.answer = 0;
    self.msg = @"";
  }
  return self;
}
static notify_answer_friend* defaultnotify_answer_friendInstance = nil;
+ (void) initialize {
  if (self == [notify_answer_friend class]) {
    defaultnotify_answer_friendInstance = [[notify_answer_friend alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultnotify_answer_friendInstance;
}
- (instancetype) defaultInstance {
  return defaultnotify_answer_friendInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPid) {
    return NO;
  }
  if (!self.hasAnswer) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPid) {
    [output writeString:1 value:self.pid];
  }
  if (self.hasAnswer) {
    [output writeUInt32:2 value:self.answer];
  }
  if (self.hasMsg) {
    [output writeString:3 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPid) {
    size_ += computeStringSize(1, self.pid);
  }
  if (self.hasAnswer) {
    size_ += computeUInt32Size(2, self.answer);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(3, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (notify_answer_friend*) parseFromData:(NSData*) data {
  return (notify_answer_friend*)[[[notify_answer_friend builder] mergeFromData:data] build];
}
+ (notify_answer_friend*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (notify_answer_friend*)[[[notify_answer_friend builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (notify_answer_friend*) parseFromInputStream:(NSInputStream*) input {
  return (notify_answer_friend*)[[[notify_answer_friend builder] mergeFromInputStream:input] build];
}
+ (notify_answer_friend*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (notify_answer_friend*)[[[notify_answer_friend builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (notify_answer_friend*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (notify_answer_friend*)[[[notify_answer_friend builder] mergeFromCodedInputStream:input] build];
}
+ (notify_answer_friend*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (notify_answer_friend*)[[[notify_answer_friend builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (notify_answer_friendBuilder*) builder {
  return [[notify_answer_friendBuilder alloc] init];
}
+ (notify_answer_friendBuilder*) builderWithPrototype:(notify_answer_friend*) prototype {
  return [[notify_answer_friend builder] mergeFrom:prototype];
}
- (notify_answer_friendBuilder*) builder {
  return [notify_answer_friend builder];
}
- (notify_answer_friendBuilder*) toBuilder {
  return [notify_answer_friend builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pid", self.pid];
  }
  if (self.hasAnswer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"answer", [NSNumber numberWithInteger:self.answer]];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPid) {
    [dictionary setObject: self.pid forKey: @"pid"];
  }
  if (self.hasAnswer) {
    [dictionary setObject: [NSNumber numberWithInteger:self.answer] forKey: @"answer"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[notify_answer_friend class]]) {
    return NO;
  }
  notify_answer_friend *otherMessage = other;
  return
      self.hasPid == otherMessage.hasPid &&
      (!self.hasPid || [self.pid isEqual:otherMessage.pid]) &&
      self.hasAnswer == otherMessage.hasAnswer &&
      (!self.hasAnswer || self.answer == otherMessage.answer) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPid) {
    hashCode = hashCode * 31 + [self.pid hash];
  }
  if (self.hasAnswer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.answer] hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface notify_answer_friendBuilder()
@property (strong) notify_answer_friend* resultNotifyAnswerFriend;
@end

@implementation notify_answer_friendBuilder
@synthesize resultNotifyAnswerFriend;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNotifyAnswerFriend = [[notify_answer_friend alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNotifyAnswerFriend;
}
- (notify_answer_friendBuilder*) clear {
  self.resultNotifyAnswerFriend = [[notify_answer_friend alloc] init];
  return self;
}
- (notify_answer_friendBuilder*) clone {
  return [notify_answer_friend builderWithPrototype:resultNotifyAnswerFriend];
}
- (notify_answer_friend*) defaultInstance {
  return [notify_answer_friend defaultInstance];
}
- (notify_answer_friend*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (notify_answer_friend*) buildPartial {
  notify_answer_friend* returnMe = resultNotifyAnswerFriend;
  self.resultNotifyAnswerFriend = nil;
  return returnMe;
}
- (notify_answer_friendBuilder*) mergeFrom:(notify_answer_friend*) other {
  if (other == [notify_answer_friend defaultInstance]) {
    return self;
  }
  if (other.hasPid) {
    [self setPid:other.pid];
  }
  if (other.hasAnswer) {
    [self setAnswer:other.answer];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (notify_answer_friendBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (notify_answer_friendBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPid:[input readString]];
        break;
      }
      case 16: {
        [self setAnswer:[input readUInt32]];
        break;
      }
      case 26: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPid {
  return resultNotifyAnswerFriend.hasPid;
}
- (NSString*) pid {
  return resultNotifyAnswerFriend.pid;
}
- (notify_answer_friendBuilder*) setPid:(NSString*) value {
  resultNotifyAnswerFriend.hasPid = YES;
  resultNotifyAnswerFriend.pid = value;
  return self;
}
- (notify_answer_friendBuilder*) clearPid {
  resultNotifyAnswerFriend.hasPid = NO;
  resultNotifyAnswerFriend.pid = @"";
  return self;
}
- (BOOL) hasAnswer {
  return resultNotifyAnswerFriend.hasAnswer;
}
- (UInt32) answer {
  return resultNotifyAnswerFriend.answer;
}
- (notify_answer_friendBuilder*) setAnswer:(UInt32) value {
  resultNotifyAnswerFriend.hasAnswer = YES;
  resultNotifyAnswerFriend.answer = value;
  return self;
}
- (notify_answer_friendBuilder*) clearAnswer {
  resultNotifyAnswerFriend.hasAnswer = NO;
  resultNotifyAnswerFriend.answer = 0;
  return self;
}
- (BOOL) hasMsg {
  return resultNotifyAnswerFriend.hasMsg;
}
- (NSString*) msg {
  return resultNotifyAnswerFriend.msg;
}
- (notify_answer_friendBuilder*) setMsg:(NSString*) value {
  resultNotifyAnswerFriend.hasMsg = YES;
  resultNotifyAnswerFriend.msg = value;
  return self;
}
- (notify_answer_friendBuilder*) clearMsg {
  resultNotifyAnswerFriend.hasMsg = NO;
  resultNotifyAnswerFriend.msg = @"";
  return self;
}
@end

@interface answer_friend ()
@property (strong) NSString* applyId;
@property UInt32 answer;
@property (strong) NSString* msg;
@end

@implementation answer_friend

- (BOOL) hasApplyId {
  return !!hasApplyId_;
}
- (void) setHasApplyId:(BOOL) _value_ {
  hasApplyId_ = !!_value_;
}
@synthesize applyId;
- (BOOL) hasAnswer {
  return !!hasAnswer_;
}
- (void) setHasAnswer:(BOOL) _value_ {
  hasAnswer_ = !!_value_;
}
@synthesize answer;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.applyId = @"";
    self.answer = 0;
    self.msg = @"";
  }
  return self;
}
static answer_friend* defaultanswer_friendInstance = nil;
+ (void) initialize {
  if (self == [answer_friend class]) {
    defaultanswer_friendInstance = [[answer_friend alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultanswer_friendInstance;
}
- (instancetype) defaultInstance {
  return defaultanswer_friendInstance;
}
- (BOOL) isInitialized {
  if (!self.hasApplyId) {
    return NO;
  }
  if (!self.hasAnswer) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasApplyId) {
    [output writeString:1 value:self.applyId];
  }
  if (self.hasAnswer) {
    [output writeUInt32:2 value:self.answer];
  }
  if (self.hasMsg) {
    [output writeString:3 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasApplyId) {
    size_ += computeStringSize(1, self.applyId);
  }
  if (self.hasAnswer) {
    size_ += computeUInt32Size(2, self.answer);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(3, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (answer_friend*) parseFromData:(NSData*) data {
  return (answer_friend*)[[[answer_friend builder] mergeFromData:data] build];
}
+ (answer_friend*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (answer_friend*)[[[answer_friend builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (answer_friend*) parseFromInputStream:(NSInputStream*) input {
  return (answer_friend*)[[[answer_friend builder] mergeFromInputStream:input] build];
}
+ (answer_friend*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (answer_friend*)[[[answer_friend builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (answer_friend*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (answer_friend*)[[[answer_friend builder] mergeFromCodedInputStream:input] build];
}
+ (answer_friend*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (answer_friend*)[[[answer_friend builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (answer_friendBuilder*) builder {
  return [[answer_friendBuilder alloc] init];
}
+ (answer_friendBuilder*) builderWithPrototype:(answer_friend*) prototype {
  return [[answer_friend builder] mergeFrom:prototype];
}
- (answer_friendBuilder*) builder {
  return [answer_friend builder];
}
- (answer_friendBuilder*) toBuilder {
  return [answer_friend builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasApplyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyId", self.applyId];
  }
  if (self.hasAnswer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"answer", [NSNumber numberWithInteger:self.answer]];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasApplyId) {
    [dictionary setObject: self.applyId forKey: @"applyId"];
  }
  if (self.hasAnswer) {
    [dictionary setObject: [NSNumber numberWithInteger:self.answer] forKey: @"answer"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[answer_friend class]]) {
    return NO;
  }
  answer_friend *otherMessage = other;
  return
      self.hasApplyId == otherMessage.hasApplyId &&
      (!self.hasApplyId || [self.applyId isEqual:otherMessage.applyId]) &&
      self.hasAnswer == otherMessage.hasAnswer &&
      (!self.hasAnswer || self.answer == otherMessage.answer) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasApplyId) {
    hashCode = hashCode * 31 + [self.applyId hash];
  }
  if (self.hasAnswer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.answer] hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface answer_friendBuilder()
@property (strong) answer_friend* resultAnswerFriend;
@end

@implementation answer_friendBuilder
@synthesize resultAnswerFriend;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAnswerFriend = [[answer_friend alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAnswerFriend;
}
- (answer_friendBuilder*) clear {
  self.resultAnswerFriend = [[answer_friend alloc] init];
  return self;
}
- (answer_friendBuilder*) clone {
  return [answer_friend builderWithPrototype:resultAnswerFriend];
}
- (answer_friend*) defaultInstance {
  return [answer_friend defaultInstance];
}
- (answer_friend*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (answer_friend*) buildPartial {
  answer_friend* returnMe = resultAnswerFriend;
  self.resultAnswerFriend = nil;
  return returnMe;
}
- (answer_friendBuilder*) mergeFrom:(answer_friend*) other {
  if (other == [answer_friend defaultInstance]) {
    return self;
  }
  if (other.hasApplyId) {
    [self setApplyId:other.applyId];
  }
  if (other.hasAnswer) {
    [self setAnswer:other.answer];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (answer_friendBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (answer_friendBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setApplyId:[input readString]];
        break;
      }
      case 16: {
        [self setAnswer:[input readUInt32]];
        break;
      }
      case 26: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasApplyId {
  return resultAnswerFriend.hasApplyId;
}
- (NSString*) applyId {
  return resultAnswerFriend.applyId;
}
- (answer_friendBuilder*) setApplyId:(NSString*) value {
  resultAnswerFriend.hasApplyId = YES;
  resultAnswerFriend.applyId = value;
  return self;
}
- (answer_friendBuilder*) clearApplyId {
  resultAnswerFriend.hasApplyId = NO;
  resultAnswerFriend.applyId = @"";
  return self;
}
- (BOOL) hasAnswer {
  return resultAnswerFriend.hasAnswer;
}
- (UInt32) answer {
  return resultAnswerFriend.answer;
}
- (answer_friendBuilder*) setAnswer:(UInt32) value {
  resultAnswerFriend.hasAnswer = YES;
  resultAnswerFriend.answer = value;
  return self;
}
- (answer_friendBuilder*) clearAnswer {
  resultAnswerFriend.hasAnswer = NO;
  resultAnswerFriend.answer = 0;
  return self;
}
- (BOOL) hasMsg {
  return resultAnswerFriend.hasMsg;
}
- (NSString*) msg {
  return resultAnswerFriend.msg;
}
- (answer_friendBuilder*) setMsg:(NSString*) value {
  resultAnswerFriend.hasMsg = YES;
  resultAnswerFriend.msg = value;
  return self;
}
- (answer_friendBuilder*) clearMsg {
  resultAnswerFriend.hasMsg = NO;
  resultAnswerFriend.msg = @"";
  return self;
}
@end

@interface answer_friend_ack ()
@property (strong) NSString* applyId;
@property UInt32 answer;
@property UInt32 code;
@property (strong) NSString* codeMsg;
@end

@implementation answer_friend_ack

- (BOOL) hasApplyId {
  return !!hasApplyId_;
}
- (void) setHasApplyId:(BOOL) _value_ {
  hasApplyId_ = !!_value_;
}
@synthesize applyId;
- (BOOL) hasAnswer {
  return !!hasAnswer_;
}
- (void) setHasAnswer:(BOOL) _value_ {
  hasAnswer_ = !!_value_;
}
@synthesize answer;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasCodeMsg {
  return !!hasCodeMsg_;
}
- (void) setHasCodeMsg:(BOOL) _value_ {
  hasCodeMsg_ = !!_value_;
}
@synthesize codeMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.applyId = @"";
    self.answer = 0;
    self.code = 0;
    self.codeMsg = @"";
  }
  return self;
}
static answer_friend_ack* defaultanswer_friend_ackInstance = nil;
+ (void) initialize {
  if (self == [answer_friend_ack class]) {
    defaultanswer_friend_ackInstance = [[answer_friend_ack alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultanswer_friend_ackInstance;
}
- (instancetype) defaultInstance {
  return defaultanswer_friend_ackInstance;
}
- (BOOL) isInitialized {
  if (!self.hasApplyId) {
    return NO;
  }
  if (!self.hasAnswer) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasApplyId) {
    [output writeString:1 value:self.applyId];
  }
  if (self.hasAnswer) {
    [output writeUInt32:2 value:self.answer];
  }
  if (self.hasCode) {
    [output writeUInt32:3 value:self.code];
  }
  if (self.hasCodeMsg) {
    [output writeString:4 value:self.codeMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasApplyId) {
    size_ += computeStringSize(1, self.applyId);
  }
  if (self.hasAnswer) {
    size_ += computeUInt32Size(2, self.answer);
  }
  if (self.hasCode) {
    size_ += computeUInt32Size(3, self.code);
  }
  if (self.hasCodeMsg) {
    size_ += computeStringSize(4, self.codeMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (answer_friend_ack*) parseFromData:(NSData*) data {
  return (answer_friend_ack*)[[[answer_friend_ack builder] mergeFromData:data] build];
}
+ (answer_friend_ack*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (answer_friend_ack*)[[[answer_friend_ack builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (answer_friend_ack*) parseFromInputStream:(NSInputStream*) input {
  return (answer_friend_ack*)[[[answer_friend_ack builder] mergeFromInputStream:input] build];
}
+ (answer_friend_ack*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (answer_friend_ack*)[[[answer_friend_ack builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (answer_friend_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (answer_friend_ack*)[[[answer_friend_ack builder] mergeFromCodedInputStream:input] build];
}
+ (answer_friend_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (answer_friend_ack*)[[[answer_friend_ack builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (answer_friend_ackBuilder*) builder {
  return [[answer_friend_ackBuilder alloc] init];
}
+ (answer_friend_ackBuilder*) builderWithPrototype:(answer_friend_ack*) prototype {
  return [[answer_friend_ack builder] mergeFrom:prototype];
}
- (answer_friend_ackBuilder*) builder {
  return [answer_friend_ack builder];
}
- (answer_friend_ackBuilder*) toBuilder {
  return [answer_friend_ack builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasApplyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyId", self.applyId];
  }
  if (self.hasAnswer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"answer", [NSNumber numberWithInteger:self.answer]];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasCodeMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeMsg", self.codeMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasApplyId) {
    [dictionary setObject: self.applyId forKey: @"applyId"];
  }
  if (self.hasAnswer) {
    [dictionary setObject: [NSNumber numberWithInteger:self.answer] forKey: @"answer"];
  }
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasCodeMsg) {
    [dictionary setObject: self.codeMsg forKey: @"codeMsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[answer_friend_ack class]]) {
    return NO;
  }
  answer_friend_ack *otherMessage = other;
  return
      self.hasApplyId == otherMessage.hasApplyId &&
      (!self.hasApplyId || [self.applyId isEqual:otherMessage.applyId]) &&
      self.hasAnswer == otherMessage.hasAnswer &&
      (!self.hasAnswer || self.answer == otherMessage.answer) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasCodeMsg == otherMessage.hasCodeMsg &&
      (!self.hasCodeMsg || [self.codeMsg isEqual:otherMessage.codeMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasApplyId) {
    hashCode = hashCode * 31 + [self.applyId hash];
  }
  if (self.hasAnswer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.answer] hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasCodeMsg) {
    hashCode = hashCode * 31 + [self.codeMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface answer_friend_ackBuilder()
@property (strong) answer_friend_ack* resultAnswerFriendAck;
@end

@implementation answer_friend_ackBuilder
@synthesize resultAnswerFriendAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAnswerFriendAck = [[answer_friend_ack alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAnswerFriendAck;
}
- (answer_friend_ackBuilder*) clear {
  self.resultAnswerFriendAck = [[answer_friend_ack alloc] init];
  return self;
}
- (answer_friend_ackBuilder*) clone {
  return [answer_friend_ack builderWithPrototype:resultAnswerFriendAck];
}
- (answer_friend_ack*) defaultInstance {
  return [answer_friend_ack defaultInstance];
}
- (answer_friend_ack*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (answer_friend_ack*) buildPartial {
  answer_friend_ack* returnMe = resultAnswerFriendAck;
  self.resultAnswerFriendAck = nil;
  return returnMe;
}
- (answer_friend_ackBuilder*) mergeFrom:(answer_friend_ack*) other {
  if (other == [answer_friend_ack defaultInstance]) {
    return self;
  }
  if (other.hasApplyId) {
    [self setApplyId:other.applyId];
  }
  if (other.hasAnswer) {
    [self setAnswer:other.answer];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasCodeMsg) {
    [self setCodeMsg:other.codeMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (answer_friend_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (answer_friend_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setApplyId:[input readString]];
        break;
      }
      case 16: {
        [self setAnswer:[input readUInt32]];
        break;
      }
      case 24: {
        [self setCode:[input readUInt32]];
        break;
      }
      case 34: {
        [self setCodeMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasApplyId {
  return resultAnswerFriendAck.hasApplyId;
}
- (NSString*) applyId {
  return resultAnswerFriendAck.applyId;
}
- (answer_friend_ackBuilder*) setApplyId:(NSString*) value {
  resultAnswerFriendAck.hasApplyId = YES;
  resultAnswerFriendAck.applyId = value;
  return self;
}
- (answer_friend_ackBuilder*) clearApplyId {
  resultAnswerFriendAck.hasApplyId = NO;
  resultAnswerFriendAck.applyId = @"";
  return self;
}
- (BOOL) hasAnswer {
  return resultAnswerFriendAck.hasAnswer;
}
- (UInt32) answer {
  return resultAnswerFriendAck.answer;
}
- (answer_friend_ackBuilder*) setAnswer:(UInt32) value {
  resultAnswerFriendAck.hasAnswer = YES;
  resultAnswerFriendAck.answer = value;
  return self;
}
- (answer_friend_ackBuilder*) clearAnswer {
  resultAnswerFriendAck.hasAnswer = NO;
  resultAnswerFriendAck.answer = 0;
  return self;
}
- (BOOL) hasCode {
  return resultAnswerFriendAck.hasCode;
}
- (UInt32) code {
  return resultAnswerFriendAck.code;
}
- (answer_friend_ackBuilder*) setCode:(UInt32) value {
  resultAnswerFriendAck.hasCode = YES;
  resultAnswerFriendAck.code = value;
  return self;
}
- (answer_friend_ackBuilder*) clearCode {
  resultAnswerFriendAck.hasCode = NO;
  resultAnswerFriendAck.code = 0;
  return self;
}
- (BOOL) hasCodeMsg {
  return resultAnswerFriendAck.hasCodeMsg;
}
- (NSString*) codeMsg {
  return resultAnswerFriendAck.codeMsg;
}
- (answer_friend_ackBuilder*) setCodeMsg:(NSString*) value {
  resultAnswerFriendAck.hasCodeMsg = YES;
  resultAnswerFriendAck.codeMsg = value;
  return self;
}
- (answer_friend_ackBuilder*) clearCodeMsg {
  resultAnswerFriendAck.hasCodeMsg = NO;
  resultAnswerFriendAck.codeMsg = @"";
  return self;
}
@end

@interface friend_info ()
@property (strong) NSMutableArray<player_info*> * friendDataArray;
@end

@implementation friend_info

@synthesize friendDataArray;
@dynamic friendData;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static friend_info* defaultfriend_infoInstance = nil;
+ (void) initialize {
  if (self == [friend_info class]) {
    defaultfriend_infoInstance = [[friend_info alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultfriend_infoInstance;
}
- (instancetype) defaultInstance {
  return defaultfriend_infoInstance;
}
- (NSArray<player_info*> *)friendData {
  return friendDataArray;
}
- (player_info*)friendDataAtIndex:(NSUInteger)index {
  return [friendDataArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitfriendData = YES;
   [self.friendData enumerateObjectsUsingBlock:^(player_info *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitfriendData = NO;
      *stop = YES;
    }
  }];
  if (!isInitfriendData) return isInitfriendData;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.friendDataArray enumerateObjectsUsingBlock:^(player_info *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.friendDataArray enumerateObjectsUsingBlock:^(player_info *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (friend_info*) parseFromData:(NSData*) data {
  return (friend_info*)[[[friend_info builder] mergeFromData:data] build];
}
+ (friend_info*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (friend_info*)[[[friend_info builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (friend_info*) parseFromInputStream:(NSInputStream*) input {
  return (friend_info*)[[[friend_info builder] mergeFromInputStream:input] build];
}
+ (friend_info*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (friend_info*)[[[friend_info builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (friend_info*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (friend_info*)[[[friend_info builder] mergeFromCodedInputStream:input] build];
}
+ (friend_info*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (friend_info*)[[[friend_info builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (friend_infoBuilder*) builder {
  return [[friend_infoBuilder alloc] init];
}
+ (friend_infoBuilder*) builderWithPrototype:(friend_info*) prototype {
  return [[friend_info builder] mergeFrom:prototype];
}
- (friend_infoBuilder*) builder {
  return [friend_info builder];
}
- (friend_infoBuilder*) toBuilder {
  return [friend_info builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.friendDataArray enumerateObjectsUsingBlock:^(player_info *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"friendData"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (player_info* element in self.friendDataArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"friendData"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[friend_info class]]) {
    return NO;
  }
  friend_info *otherMessage = other;
  return
      [self.friendDataArray isEqualToArray:otherMessage.friendDataArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.friendDataArray enumerateObjectsUsingBlock:^(player_info *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface friend_infoBuilder()
@property (strong) friend_info* resultFriendInfo;
@end

@implementation friend_infoBuilder
@synthesize resultFriendInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultFriendInfo = [[friend_info alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultFriendInfo;
}
- (friend_infoBuilder*) clear {
  self.resultFriendInfo = [[friend_info alloc] init];
  return self;
}
- (friend_infoBuilder*) clone {
  return [friend_info builderWithPrototype:resultFriendInfo];
}
- (friend_info*) defaultInstance {
  return [friend_info defaultInstance];
}
- (friend_info*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (friend_info*) buildPartial {
  friend_info* returnMe = resultFriendInfo;
  self.resultFriendInfo = nil;
  return returnMe;
}
- (friend_infoBuilder*) mergeFrom:(friend_info*) other {
  if (other == [friend_info defaultInstance]) {
    return self;
  }
  if (other.friendDataArray.count > 0) {
    if (resultFriendInfo.friendDataArray == nil) {
      resultFriendInfo.friendDataArray = [[NSMutableArray alloc] initWithArray:other.friendDataArray];
    } else {
      [resultFriendInfo.friendDataArray addObjectsFromArray:other.friendDataArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (friend_infoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (friend_infoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        player_infoBuilder* subBuilder = [player_info builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFriendData:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray<player_info*> *)friendData {
  return resultFriendInfo.friendDataArray;
}
- (player_info*)friendDataAtIndex:(NSUInteger)index {
  return [resultFriendInfo friendDataAtIndex:index];
}
- (friend_infoBuilder *)addFriendData:(player_info*)value {
  if (resultFriendInfo.friendDataArray == nil) {
    resultFriendInfo.friendDataArray = [[NSMutableArray alloc]init];
  }
  [resultFriendInfo.friendDataArray addObject:value];
  return self;
}
- (friend_infoBuilder *)setFriendDataArray:(NSArray<player_info*> *)array {
  resultFriendInfo.friendDataArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (friend_infoBuilder *)clearFriendData {
  resultFriendInfo.friendDataArray = nil;
  return self;
}
@end

@interface chat_private ()
@property (strong) NSString* pid;
@property (strong) NSString* msg;
@end

@implementation chat_private

- (BOOL) hasPid {
  return !!hasPid_;
}
- (void) setHasPid:(BOOL) _value_ {
  hasPid_ = !!_value_;
}
@synthesize pid;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.pid = @"";
    self.msg = @"";
  }
  return self;
}
static chat_private* defaultchat_privateInstance = nil;
+ (void) initialize {
  if (self == [chat_private class]) {
    defaultchat_privateInstance = [[chat_private alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultchat_privateInstance;
}
- (instancetype) defaultInstance {
  return defaultchat_privateInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPid) {
    return NO;
  }
  if (!self.hasMsg) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPid) {
    [output writeString:1 value:self.pid];
  }
  if (self.hasMsg) {
    [output writeString:2 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPid) {
    size_ += computeStringSize(1, self.pid);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(2, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (chat_private*) parseFromData:(NSData*) data {
  return (chat_private*)[[[chat_private builder] mergeFromData:data] build];
}
+ (chat_private*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (chat_private*)[[[chat_private builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (chat_private*) parseFromInputStream:(NSInputStream*) input {
  return (chat_private*)[[[chat_private builder] mergeFromInputStream:input] build];
}
+ (chat_private*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (chat_private*)[[[chat_private builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (chat_private*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (chat_private*)[[[chat_private builder] mergeFromCodedInputStream:input] build];
}
+ (chat_private*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (chat_private*)[[[chat_private builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (chat_privateBuilder*) builder {
  return [[chat_privateBuilder alloc] init];
}
+ (chat_privateBuilder*) builderWithPrototype:(chat_private*) prototype {
  return [[chat_private builder] mergeFrom:prototype];
}
- (chat_privateBuilder*) builder {
  return [chat_private builder];
}
- (chat_privateBuilder*) toBuilder {
  return [chat_private builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pid", self.pid];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPid) {
    [dictionary setObject: self.pid forKey: @"pid"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[chat_private class]]) {
    return NO;
  }
  chat_private *otherMessage = other;
  return
      self.hasPid == otherMessage.hasPid &&
      (!self.hasPid || [self.pid isEqual:otherMessage.pid]) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPid) {
    hashCode = hashCode * 31 + [self.pid hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface chat_privateBuilder()
@property (strong) chat_private* resultChatPrivate;
@end

@implementation chat_privateBuilder
@synthesize resultChatPrivate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatPrivate = [[chat_private alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatPrivate;
}
- (chat_privateBuilder*) clear {
  self.resultChatPrivate = [[chat_private alloc] init];
  return self;
}
- (chat_privateBuilder*) clone {
  return [chat_private builderWithPrototype:resultChatPrivate];
}
- (chat_private*) defaultInstance {
  return [chat_private defaultInstance];
}
- (chat_private*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (chat_private*) buildPartial {
  chat_private* returnMe = resultChatPrivate;
  self.resultChatPrivate = nil;
  return returnMe;
}
- (chat_privateBuilder*) mergeFrom:(chat_private*) other {
  if (other == [chat_private defaultInstance]) {
    return self;
  }
  if (other.hasPid) {
    [self setPid:other.pid];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (chat_privateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (chat_privateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPid:[input readString]];
        break;
      }
      case 18: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPid {
  return resultChatPrivate.hasPid;
}
- (NSString*) pid {
  return resultChatPrivate.pid;
}
- (chat_privateBuilder*) setPid:(NSString*) value {
  resultChatPrivate.hasPid = YES;
  resultChatPrivate.pid = value;
  return self;
}
- (chat_privateBuilder*) clearPid {
  resultChatPrivate.hasPid = NO;
  resultChatPrivate.pid = @"";
  return self;
}
- (BOOL) hasMsg {
  return resultChatPrivate.hasMsg;
}
- (NSString*) msg {
  return resultChatPrivate.msg;
}
- (chat_privateBuilder*) setMsg:(NSString*) value {
  resultChatPrivate.hasMsg = YES;
  resultChatPrivate.msg = value;
  return self;
}
- (chat_privateBuilder*) clearMsg {
  resultChatPrivate.hasMsg = NO;
  resultChatPrivate.msg = @"";
  return self;
}
@end

@interface notify_chat_private ()
@property (strong) player_info* info;
@property (strong) NSString* msg;
@end

@implementation notify_chat_private

- (BOOL) hasInfo {
  return !!hasInfo_;
}
- (void) setHasInfo:(BOOL) _value_ {
  hasInfo_ = !!_value_;
}
@synthesize info;
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (instancetype) init {
  if ((self = [super init])) {
    self.info = [player_info defaultInstance];
    self.msg = @"";
  }
  return self;
}
static notify_chat_private* defaultnotify_chat_privateInstance = nil;
+ (void) initialize {
  if (self == [notify_chat_private class]) {
    defaultnotify_chat_privateInstance = [[notify_chat_private alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultnotify_chat_privateInstance;
}
- (instancetype) defaultInstance {
  return defaultnotify_chat_privateInstance;
}
- (BOOL) isInitialized {
  if (!self.hasInfo) {
    return NO;
  }
  if (!self.hasMsg) {
    return NO;
  }
  if (!self.info.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInfo) {
    [output writeMessage:1 value:self.info];
  }
  if (self.hasMsg) {
    [output writeString:2 value:self.msg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInfo) {
    size_ += computeMessageSize(1, self.info);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(2, self.msg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (notify_chat_private*) parseFromData:(NSData*) data {
  return (notify_chat_private*)[[[notify_chat_private builder] mergeFromData:data] build];
}
+ (notify_chat_private*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (notify_chat_private*)[[[notify_chat_private builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (notify_chat_private*) parseFromInputStream:(NSInputStream*) input {
  return (notify_chat_private*)[[[notify_chat_private builder] mergeFromInputStream:input] build];
}
+ (notify_chat_private*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (notify_chat_private*)[[[notify_chat_private builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (notify_chat_private*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (notify_chat_private*)[[[notify_chat_private builder] mergeFromCodedInputStream:input] build];
}
+ (notify_chat_private*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (notify_chat_private*)[[[notify_chat_private builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (notify_chat_privateBuilder*) builder {
  return [[notify_chat_privateBuilder alloc] init];
}
+ (notify_chat_privateBuilder*) builderWithPrototype:(notify_chat_private*) prototype {
  return [[notify_chat_private builder] mergeFrom:prototype];
}
- (notify_chat_privateBuilder*) builder {
  return [notify_chat_private builder];
}
- (notify_chat_privateBuilder*) toBuilder {
  return [notify_chat_private builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"info"];
    [self.info writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.info storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"info"];
  }
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[notify_chat_private class]]) {
    return NO;
  }
  notify_chat_private *otherMessage = other;
  return
      self.hasInfo == otherMessage.hasInfo &&
      (!self.hasInfo || [self.info isEqual:otherMessage.info]) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInfo) {
    hashCode = hashCode * 31 + [self.info hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface notify_chat_privateBuilder()
@property (strong) notify_chat_private* resultNotifyChatPrivate;
@end

@implementation notify_chat_privateBuilder
@synthesize resultNotifyChatPrivate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultNotifyChatPrivate = [[notify_chat_private alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultNotifyChatPrivate;
}
- (notify_chat_privateBuilder*) clear {
  self.resultNotifyChatPrivate = [[notify_chat_private alloc] init];
  return self;
}
- (notify_chat_privateBuilder*) clone {
  return [notify_chat_private builderWithPrototype:resultNotifyChatPrivate];
}
- (notify_chat_private*) defaultInstance {
  return [notify_chat_private defaultInstance];
}
- (notify_chat_private*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (notify_chat_private*) buildPartial {
  notify_chat_private* returnMe = resultNotifyChatPrivate;
  self.resultNotifyChatPrivate = nil;
  return returnMe;
}
- (notify_chat_privateBuilder*) mergeFrom:(notify_chat_private*) other {
  if (other == [notify_chat_private defaultInstance]) {
    return self;
  }
  if (other.hasInfo) {
    [self mergeInfo:other.info];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (notify_chat_privateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (notify_chat_privateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        player_infoBuilder* subBuilder = [player_info builder];
        if (self.hasInfo) {
          [subBuilder mergeFrom:self.info];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInfo:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasInfo {
  return resultNotifyChatPrivate.hasInfo;
}
- (player_info*) info {
  return resultNotifyChatPrivate.info;
}
- (notify_chat_privateBuilder*) setInfo:(player_info*) value {
  resultNotifyChatPrivate.hasInfo = YES;
  resultNotifyChatPrivate.info = value;
  return self;
}
- (notify_chat_privateBuilder*) setInfoBuilder:(player_infoBuilder*) builderForValue {
  return [self setInfo:[builderForValue build]];
}
- (notify_chat_privateBuilder*) mergeInfo:(player_info*) value {
  if (resultNotifyChatPrivate.hasInfo &&
      resultNotifyChatPrivate.info != [player_info defaultInstance]) {
    resultNotifyChatPrivate.info =
      [[[player_info builderWithPrototype:resultNotifyChatPrivate.info] mergeFrom:value] buildPartial];
  } else {
    resultNotifyChatPrivate.info = value;
  }
  resultNotifyChatPrivate.hasInfo = YES;
  return self;
}
- (notify_chat_privateBuilder*) clearInfo {
  resultNotifyChatPrivate.hasInfo = NO;
  resultNotifyChatPrivate.info = [player_info defaultInstance];
  return self;
}
- (BOOL) hasMsg {
  return resultNotifyChatPrivate.hasMsg;
}
- (NSString*) msg {
  return resultNotifyChatPrivate.msg;
}
- (notify_chat_privateBuilder*) setMsg:(NSString*) value {
  resultNotifyChatPrivate.hasMsg = YES;
  resultNotifyChatPrivate.msg = value;
  return self;
}
- (notify_chat_privateBuilder*) clearMsg {
  resultNotifyChatPrivate.hasMsg = NO;
  resultNotifyChatPrivate.msg = @"";
  return self;
}
@end

@interface chat_private_ack ()
@property UInt32 code;
@property UInt32 msgId;
@property (strong) NSString* codeMsg;
@end

@implementation chat_private_ack

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (BOOL) hasCodeMsg {
  return !!hasCodeMsg_;
}
- (void) setHasCodeMsg:(BOOL) _value_ {
  hasCodeMsg_ = !!_value_;
}
@synthesize codeMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = 0;
    self.msgId = 0;
    self.codeMsg = @"";
  }
  return self;
}
static chat_private_ack* defaultchat_private_ackInstance = nil;
+ (void) initialize {
  if (self == [chat_private_ack class]) {
    defaultchat_private_ackInstance = [[chat_private_ack alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultchat_private_ackInstance;
}
- (instancetype) defaultInstance {
  return defaultchat_private_ackInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCode) {
    return NO;
  }
  if (!self.hasMsgId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeUInt32:1 value:self.code];
  }
  if (self.hasMsgId) {
    [output writeUInt32:2 value:self.msgId];
  }
  if (self.hasCodeMsg) {
    [output writeString:3 value:self.codeMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeUInt32Size(1, self.code);
  }
  if (self.hasMsgId) {
    size_ += computeUInt32Size(2, self.msgId);
  }
  if (self.hasCodeMsg) {
    size_ += computeStringSize(3, self.codeMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (chat_private_ack*) parseFromData:(NSData*) data {
  return (chat_private_ack*)[[[chat_private_ack builder] mergeFromData:data] build];
}
+ (chat_private_ack*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (chat_private_ack*)[[[chat_private_ack builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (chat_private_ack*) parseFromInputStream:(NSInputStream*) input {
  return (chat_private_ack*)[[[chat_private_ack builder] mergeFromInputStream:input] build];
}
+ (chat_private_ack*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (chat_private_ack*)[[[chat_private_ack builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (chat_private_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (chat_private_ack*)[[[chat_private_ack builder] mergeFromCodedInputStream:input] build];
}
+ (chat_private_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (chat_private_ack*)[[[chat_private_ack builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (chat_private_ackBuilder*) builder {
  return [[chat_private_ackBuilder alloc] init];
}
+ (chat_private_ackBuilder*) builderWithPrototype:(chat_private_ack*) prototype {
  return [[chat_private_ack builder] mergeFrom:prototype];
}
- (chat_private_ackBuilder*) builder {
  return [chat_private_ack builder];
}
- (chat_private_ackBuilder*) toBuilder {
  return [chat_private_ack builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", [NSNumber numberWithInteger:self.msgId]];
  }
  if (self.hasCodeMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeMsg", self.codeMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.msgId] forKey: @"msgId"];
  }
  if (self.hasCodeMsg) {
    [dictionary setObject: self.codeMsg forKey: @"codeMsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[chat_private_ack class]]) {
    return NO;
  }
  chat_private_ack *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || self.msgId == otherMessage.msgId) &&
      self.hasCodeMsg == otherMessage.hasCodeMsg &&
      (!self.hasCodeMsg || [self.codeMsg isEqual:otherMessage.codeMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.msgId] hash];
  }
  if (self.hasCodeMsg) {
    hashCode = hashCode * 31 + [self.codeMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface chat_private_ackBuilder()
@property (strong) chat_private_ack* resultChatPrivateAck;
@end

@implementation chat_private_ackBuilder
@synthesize resultChatPrivateAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChatPrivateAck = [[chat_private_ack alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChatPrivateAck;
}
- (chat_private_ackBuilder*) clear {
  self.resultChatPrivateAck = [[chat_private_ack alloc] init];
  return self;
}
- (chat_private_ackBuilder*) clone {
  return [chat_private_ack builderWithPrototype:resultChatPrivateAck];
}
- (chat_private_ack*) defaultInstance {
  return [chat_private_ack defaultInstance];
}
- (chat_private_ack*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (chat_private_ack*) buildPartial {
  chat_private_ack* returnMe = resultChatPrivateAck;
  self.resultChatPrivateAck = nil;
  return returnMe;
}
- (chat_private_ackBuilder*) mergeFrom:(chat_private_ack*) other {
  if (other == [chat_private_ack defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  if (other.hasCodeMsg) {
    [self setCodeMsg:other.codeMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (chat_private_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (chat_private_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readUInt32]];
        break;
      }
      case 16: {
        [self setMsgId:[input readUInt32]];
        break;
      }
      case 26: {
        [self setCodeMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultChatPrivateAck.hasCode;
}
- (UInt32) code {
  return resultChatPrivateAck.code;
}
- (chat_private_ackBuilder*) setCode:(UInt32) value {
  resultChatPrivateAck.hasCode = YES;
  resultChatPrivateAck.code = value;
  return self;
}
- (chat_private_ackBuilder*) clearCode {
  resultChatPrivateAck.hasCode = NO;
  resultChatPrivateAck.code = 0;
  return self;
}
- (BOOL) hasMsgId {
  return resultChatPrivateAck.hasMsgId;
}
- (UInt32) msgId {
  return resultChatPrivateAck.msgId;
}
- (chat_private_ackBuilder*) setMsgId:(UInt32) value {
  resultChatPrivateAck.hasMsgId = YES;
  resultChatPrivateAck.msgId = value;
  return self;
}
- (chat_private_ackBuilder*) clearMsgId {
  resultChatPrivateAck.hasMsgId = NO;
  resultChatPrivateAck.msgId = 0;
  return self;
}
- (BOOL) hasCodeMsg {
  return resultChatPrivateAck.hasCodeMsg;
}
- (NSString*) codeMsg {
  return resultChatPrivateAck.codeMsg;
}
- (chat_private_ackBuilder*) setCodeMsg:(NSString*) value {
  resultChatPrivateAck.hasCodeMsg = YES;
  resultChatPrivateAck.codeMsg = value;
  return self;
}
- (chat_private_ackBuilder*) clearCodeMsg {
  resultChatPrivateAck.hasCodeMsg = NO;
  resultChatPrivateAck.codeMsg = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
