// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Watchdog_login.pb.h"
// @@protoc_insertion_point(imports)

@implementation WatchdogLoginRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [WatchdogLoginRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface create ()
@property (strong) NSString* name;
@property UInt32 sex;
@property (strong) NSString* phone;
@end

@implementation create

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasSex {
  return !!hasSex_;
}
- (void) setHasSex:(BOOL) _value_ {
  hasSex_ = !!_value_;
}
@synthesize sex;
- (BOOL) hasPhone {
  return !!hasPhone_;
}
- (void) setHasPhone:(BOOL) _value_ {
  hasPhone_ = !!_value_;
}
@synthesize phone;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.sex = 0;
    self.phone = @"";
  }
  return self;
}
static create* defaultcreateInstance = nil;
+ (void) initialize {
  if (self == [create class]) {
    defaultcreateInstance = [[create alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultcreateInstance;
}
- (instancetype) defaultInstance {
  return defaultcreateInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasSex) {
    [output writeUInt32:2 value:self.sex];
  }
  if (self.hasPhone) {
    [output writeString:3 value:self.phone];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasSex) {
    size_ += computeUInt32Size(2, self.sex);
  }
  if (self.hasPhone) {
    size_ += computeStringSize(3, self.phone);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (create*) parseFromData:(NSData*) data {
  return (create*)[[[create builder] mergeFromData:data] build];
}
+ (create*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (create*)[[[create builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (create*) parseFromInputStream:(NSInputStream*) input {
  return (create*)[[[create builder] mergeFromInputStream:input] build];
}
+ (create*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (create*)[[[create builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (create*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (create*)[[[create builder] mergeFromCodedInputStream:input] build];
}
+ (create*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (create*)[[[create builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (createBuilder*) builder {
  return [[createBuilder alloc] init];
}
+ (createBuilder*) builderWithPrototype:(create*) prototype {
  return [[create builder] mergeFrom:prototype];
}
- (createBuilder*) builder {
  return [create builder];
}
- (createBuilder*) toBuilder {
  return [create builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasSex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sex", [NSNumber numberWithInteger:self.sex]];
  }
  if (self.hasPhone) {
    [output appendFormat:@"%@%@: %@\n", indent, @"phone", self.phone];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasSex) {
    [dictionary setObject: [NSNumber numberWithInteger:self.sex] forKey: @"sex"];
  }
  if (self.hasPhone) {
    [dictionary setObject: self.phone forKey: @"phone"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[create class]]) {
    return NO;
  }
  create *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasSex == otherMessage.hasSex &&
      (!self.hasSex || self.sex == otherMessage.sex) &&
      self.hasPhone == otherMessage.hasPhone &&
      (!self.hasPhone || [self.phone isEqual:otherMessage.phone]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasSex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sex] hash];
  }
  if (self.hasPhone) {
    hashCode = hashCode * 31 + [self.phone hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface createBuilder()
@property (strong) create* resultCreate;
@end

@implementation createBuilder
@synthesize resultCreate;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCreate = [[create alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCreate;
}
- (createBuilder*) clear {
  self.resultCreate = [[create alloc] init];
  return self;
}
- (createBuilder*) clone {
  return [create builderWithPrototype:resultCreate];
}
- (create*) defaultInstance {
  return [create defaultInstance];
}
- (create*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (create*) buildPartial {
  create* returnMe = resultCreate;
  self.resultCreate = nil;
  return returnMe;
}
- (createBuilder*) mergeFrom:(create*) other {
  if (other == [create defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasSex) {
    [self setSex:other.sex];
  }
  if (other.hasPhone) {
    [self setPhone:other.phone];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (createBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (createBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setSex:[input readUInt32]];
        break;
      }
      case 26: {
        [self setPhone:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultCreate.hasName;
}
- (NSString*) name {
  return resultCreate.name;
}
- (createBuilder*) setName:(NSString*) value {
  resultCreate.hasName = YES;
  resultCreate.name = value;
  return self;
}
- (createBuilder*) clearName {
  resultCreate.hasName = NO;
  resultCreate.name = @"";
  return self;
}
- (BOOL) hasSex {
  return resultCreate.hasSex;
}
- (UInt32) sex {
  return resultCreate.sex;
}
- (createBuilder*) setSex:(UInt32) value {
  resultCreate.hasSex = YES;
  resultCreate.sex = value;
  return self;
}
- (createBuilder*) clearSex {
  resultCreate.hasSex = NO;
  resultCreate.sex = 0;
  return self;
}
- (BOOL) hasPhone {
  return resultCreate.hasPhone;
}
- (NSString*) phone {
  return resultCreate.phone;
}
- (createBuilder*) setPhone:(NSString*) value {
  resultCreate.hasPhone = YES;
  resultCreate.phone = value;
  return self;
}
- (createBuilder*) clearPhone {
  resultCreate.hasPhone = NO;
  resultCreate.phone = @"";
  return self;
}
@end

@interface create_ack ()
@property (strong) NSString* pid;
@property UInt32 code;
@property (strong) NSString* codeMsg;
@end

@implementation create_ack

- (BOOL) hasPid {
  return !!hasPid_;
}
- (void) setHasPid:(BOOL) _value_ {
  hasPid_ = !!_value_;
}
@synthesize pid;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasCodeMsg {
  return !!hasCodeMsg_;
}
- (void) setHasCodeMsg:(BOOL) _value_ {
  hasCodeMsg_ = !!_value_;
}
@synthesize codeMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.pid = @"";
    self.code = 0;
    self.codeMsg = @"";
  }
  return self;
}
static create_ack* defaultcreate_ackInstance = nil;
+ (void) initialize {
  if (self == [create_ack class]) {
    defaultcreate_ackInstance = [[create_ack alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultcreate_ackInstance;
}
- (instancetype) defaultInstance {
  return defaultcreate_ackInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPid) {
    return NO;
  }
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPid) {
    [output writeString:1 value:self.pid];
  }
  if (self.hasCode) {
    [output writeUInt32:2 value:self.code];
  }
  if (self.hasCodeMsg) {
    [output writeString:3 value:self.codeMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPid) {
    size_ += computeStringSize(1, self.pid);
  }
  if (self.hasCode) {
    size_ += computeUInt32Size(2, self.code);
  }
  if (self.hasCodeMsg) {
    size_ += computeStringSize(3, self.codeMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (create_ack*) parseFromData:(NSData*) data {
  return (create_ack*)[[[create_ack builder] mergeFromData:data] build];
}
+ (create_ack*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (create_ack*)[[[create_ack builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (create_ack*) parseFromInputStream:(NSInputStream*) input {
  return (create_ack*)[[[create_ack builder] mergeFromInputStream:input] build];
}
+ (create_ack*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (create_ack*)[[[create_ack builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (create_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (create_ack*)[[[create_ack builder] mergeFromCodedInputStream:input] build];
}
+ (create_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (create_ack*)[[[create_ack builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (create_ackBuilder*) builder {
  return [[create_ackBuilder alloc] init];
}
+ (create_ackBuilder*) builderWithPrototype:(create_ack*) prototype {
  return [[create_ack builder] mergeFrom:prototype];
}
- (create_ackBuilder*) builder {
  return [create_ack builder];
}
- (create_ackBuilder*) toBuilder {
  return [create_ack builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pid", self.pid];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasCodeMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeMsg", self.codeMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPid) {
    [dictionary setObject: self.pid forKey: @"pid"];
  }
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasCodeMsg) {
    [dictionary setObject: self.codeMsg forKey: @"codeMsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[create_ack class]]) {
    return NO;
  }
  create_ack *otherMessage = other;
  return
      self.hasPid == otherMessage.hasPid &&
      (!self.hasPid || [self.pid isEqual:otherMessage.pid]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasCodeMsg == otherMessage.hasCodeMsg &&
      (!self.hasCodeMsg || [self.codeMsg isEqual:otherMessage.codeMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPid) {
    hashCode = hashCode * 31 + [self.pid hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasCodeMsg) {
    hashCode = hashCode * 31 + [self.codeMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface create_ackBuilder()
@property (strong) create_ack* resultCreateAck;
@end

@implementation create_ackBuilder
@synthesize resultCreateAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCreateAck = [[create_ack alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCreateAck;
}
- (create_ackBuilder*) clear {
  self.resultCreateAck = [[create_ack alloc] init];
  return self;
}
- (create_ackBuilder*) clone {
  return [create_ack builderWithPrototype:resultCreateAck];
}
- (create_ack*) defaultInstance {
  return [create_ack defaultInstance];
}
- (create_ack*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (create_ack*) buildPartial {
  create_ack* returnMe = resultCreateAck;
  self.resultCreateAck = nil;
  return returnMe;
}
- (create_ackBuilder*) mergeFrom:(create_ack*) other {
  if (other == [create_ack defaultInstance]) {
    return self;
  }
  if (other.hasPid) {
    [self setPid:other.pid];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasCodeMsg) {
    [self setCodeMsg:other.codeMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (create_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (create_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPid:[input readString]];
        break;
      }
      case 16: {
        [self setCode:[input readUInt32]];
        break;
      }
      case 26: {
        [self setCodeMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPid {
  return resultCreateAck.hasPid;
}
- (NSString*) pid {
  return resultCreateAck.pid;
}
- (create_ackBuilder*) setPid:(NSString*) value {
  resultCreateAck.hasPid = YES;
  resultCreateAck.pid = value;
  return self;
}
- (create_ackBuilder*) clearPid {
  resultCreateAck.hasPid = NO;
  resultCreateAck.pid = @"";
  return self;
}
- (BOOL) hasCode {
  return resultCreateAck.hasCode;
}
- (UInt32) code {
  return resultCreateAck.code;
}
- (create_ackBuilder*) setCode:(UInt32) value {
  resultCreateAck.hasCode = YES;
  resultCreateAck.code = value;
  return self;
}
- (create_ackBuilder*) clearCode {
  resultCreateAck.hasCode = NO;
  resultCreateAck.code = 0;
  return self;
}
- (BOOL) hasCodeMsg {
  return resultCreateAck.hasCodeMsg;
}
- (NSString*) codeMsg {
  return resultCreateAck.codeMsg;
}
- (create_ackBuilder*) setCodeMsg:(NSString*) value {
  resultCreateAck.hasCodeMsg = YES;
  resultCreateAck.codeMsg = value;
  return self;
}
- (create_ackBuilder*) clearCodeMsg {
  resultCreateAck.hasCodeMsg = NO;
  resultCreateAck.codeMsg = @"";
  return self;
}
@end

@interface login ()
@property (strong) NSString* pid;
@property (strong) NSString* secret;
@end

@implementation login

- (BOOL) hasPid {
  return !!hasPid_;
}
- (void) setHasPid:(BOOL) _value_ {
  hasPid_ = !!_value_;
}
@synthesize pid;
- (BOOL) hasSecret {
  return !!hasSecret_;
}
- (void) setHasSecret:(BOOL) _value_ {
  hasSecret_ = !!_value_;
}
@synthesize secret;
- (instancetype) init {
  if ((self = [super init])) {
    self.pid = @"";
    self.secret = @"";
  }
  return self;
}
static login* defaultloginInstance = nil;
+ (void) initialize {
  if (self == [login class]) {
    defaultloginInstance = [[login alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultloginInstance;
}
- (instancetype) defaultInstance {
  return defaultloginInstance;
}
- (BOOL) isInitialized {
  if (!self.hasPid) {
    return NO;
  }
  if (!self.hasSecret) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPid) {
    [output writeString:1 value:self.pid];
  }
  if (self.hasSecret) {
    [output writeString:2 value:self.secret];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasPid) {
    size_ += computeStringSize(1, self.pid);
  }
  if (self.hasSecret) {
    size_ += computeStringSize(2, self.secret);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (login*) parseFromData:(NSData*) data {
  return (login*)[[[login builder] mergeFromData:data] build];
}
+ (login*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login*)[[[login builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (login*) parseFromInputStream:(NSInputStream*) input {
  return (login*)[[[login builder] mergeFromInputStream:input] build];
}
+ (login*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login*)[[[login builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (login*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (login*)[[[login builder] mergeFromCodedInputStream:input] build];
}
+ (login*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login*)[[[login builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (loginBuilder*) builder {
  return [[loginBuilder alloc] init];
}
+ (loginBuilder*) builderWithPrototype:(login*) prototype {
  return [[login builder] mergeFrom:prototype];
}
- (loginBuilder*) builder {
  return [login builder];
}
- (loginBuilder*) toBuilder {
  return [login builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pid", self.pid];
  }
  if (self.hasSecret) {
    [output appendFormat:@"%@%@: %@\n", indent, @"secret", self.secret];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasPid) {
    [dictionary setObject: self.pid forKey: @"pid"];
  }
  if (self.hasSecret) {
    [dictionary setObject: self.secret forKey: @"secret"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[login class]]) {
    return NO;
  }
  login *otherMessage = other;
  return
      self.hasPid == otherMessage.hasPid &&
      (!self.hasPid || [self.pid isEqual:otherMessage.pid]) &&
      self.hasSecret == otherMessage.hasSecret &&
      (!self.hasSecret || [self.secret isEqual:otherMessage.secret]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasPid) {
    hashCode = hashCode * 31 + [self.pid hash];
  }
  if (self.hasSecret) {
    hashCode = hashCode * 31 + [self.secret hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface loginBuilder()
@property (strong) login* resultLogin;
@end

@implementation loginBuilder
@synthesize resultLogin;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLogin = [[login alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLogin;
}
- (loginBuilder*) clear {
  self.resultLogin = [[login alloc] init];
  return self;
}
- (loginBuilder*) clone {
  return [login builderWithPrototype:resultLogin];
}
- (login*) defaultInstance {
  return [login defaultInstance];
}
- (login*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (login*) buildPartial {
  login* returnMe = resultLogin;
  self.resultLogin = nil;
  return returnMe;
}
- (loginBuilder*) mergeFrom:(login*) other {
  if (other == [login defaultInstance]) {
    return self;
  }
  if (other.hasPid) {
    [self setPid:other.pid];
  }
  if (other.hasSecret) {
    [self setSecret:other.secret];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (loginBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (loginBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setPid:[input readString]];
        break;
      }
      case 18: {
        [self setSecret:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasPid {
  return resultLogin.hasPid;
}
- (NSString*) pid {
  return resultLogin.pid;
}
- (loginBuilder*) setPid:(NSString*) value {
  resultLogin.hasPid = YES;
  resultLogin.pid = value;
  return self;
}
- (loginBuilder*) clearPid {
  resultLogin.hasPid = NO;
  resultLogin.pid = @"";
  return self;
}
- (BOOL) hasSecret {
  return resultLogin.hasSecret;
}
- (NSString*) secret {
  return resultLogin.secret;
}
- (loginBuilder*) setSecret:(NSString*) value {
  resultLogin.hasSecret = YES;
  resultLogin.secret = value;
  return self;
}
- (loginBuilder*) clearSecret {
  resultLogin.hasSecret = NO;
  resultLogin.secret = @"";
  return self;
}
@end

@interface login_ack ()
@property UInt32 code;
@property (strong) NSString* codeMsg;
@end

@implementation login_ack

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasCodeMsg {
  return !!hasCodeMsg_;
}
- (void) setHasCodeMsg:(BOOL) _value_ {
  hasCodeMsg_ = !!_value_;
}
@synthesize codeMsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = 0;
    self.codeMsg = @"";
  }
  return self;
}
static login_ack* defaultlogin_ackInstance = nil;
+ (void) initialize {
  if (self == [login_ack class]) {
    defaultlogin_ackInstance = [[login_ack alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultlogin_ackInstance;
}
- (instancetype) defaultInstance {
  return defaultlogin_ackInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeUInt32:1 value:self.code];
  }
  if (self.hasCodeMsg) {
    [output writeString:2 value:self.codeMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeUInt32Size(1, self.code);
  }
  if (self.hasCodeMsg) {
    size_ += computeStringSize(2, self.codeMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (login_ack*) parseFromData:(NSData*) data {
  return (login_ack*)[[[login_ack builder] mergeFromData:data] build];
}
+ (login_ack*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login_ack*)[[[login_ack builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (login_ack*) parseFromInputStream:(NSInputStream*) input {
  return (login_ack*)[[[login_ack builder] mergeFromInputStream:input] build];
}
+ (login_ack*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login_ack*)[[[login_ack builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (login_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (login_ack*)[[[login_ack builder] mergeFromCodedInputStream:input] build];
}
+ (login_ack*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login_ack*)[[[login_ack builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (login_ackBuilder*) builder {
  return [[login_ackBuilder alloc] init];
}
+ (login_ackBuilder*) builderWithPrototype:(login_ack*) prototype {
  return [[login_ack builder] mergeFrom:prototype];
}
- (login_ackBuilder*) builder {
  return [login_ack builder];
}
- (login_ackBuilder*) toBuilder {
  return [login_ack builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasCodeMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeMsg", self.codeMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasCodeMsg) {
    [dictionary setObject: self.codeMsg forKey: @"codeMsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[login_ack class]]) {
    return NO;
  }
  login_ack *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasCodeMsg == otherMessage.hasCodeMsg &&
      (!self.hasCodeMsg || [self.codeMsg isEqual:otherMessage.codeMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasCodeMsg) {
    hashCode = hashCode * 31 + [self.codeMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface login_ackBuilder()
@property (strong) login_ack* resultLoginAck;
@end

@implementation login_ackBuilder
@synthesize resultLoginAck;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginAck = [[login_ack alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginAck;
}
- (login_ackBuilder*) clear {
  self.resultLoginAck = [[login_ack alloc] init];
  return self;
}
- (login_ackBuilder*) clone {
  return [login_ack builderWithPrototype:resultLoginAck];
}
- (login_ack*) defaultInstance {
  return [login_ack defaultInstance];
}
- (login_ack*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (login_ack*) buildPartial {
  login_ack* returnMe = resultLoginAck;
  self.resultLoginAck = nil;
  return returnMe;
}
- (login_ackBuilder*) mergeFrom:(login_ack*) other {
  if (other == [login_ack defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasCodeMsg) {
    [self setCodeMsg:other.codeMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (login_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (login_ackBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readUInt32]];
        break;
      }
      case 18: {
        [self setCodeMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultLoginAck.hasCode;
}
- (UInt32) code {
  return resultLoginAck.code;
}
- (login_ackBuilder*) setCode:(UInt32) value {
  resultLoginAck.hasCode = YES;
  resultLoginAck.code = value;
  return self;
}
- (login_ackBuilder*) clearCode {
  resultLoginAck.hasCode = NO;
  resultLoginAck.code = 0;
  return self;
}
- (BOOL) hasCodeMsg {
  return resultLoginAck.hasCodeMsg;
}
- (NSString*) codeMsg {
  return resultLoginAck.codeMsg;
}
- (login_ackBuilder*) setCodeMsg:(NSString*) value {
  resultLoginAck.hasCodeMsg = YES;
  resultLoginAck.codeMsg = value;
  return self;
}
- (login_ackBuilder*) clearCodeMsg {
  resultLoginAck.hasCodeMsg = NO;
  resultLoginAck.codeMsg = @"";
  return self;
}
@end

@interface HelloRequest ()
@property (strong) NSString* user;
@property (strong) NSString* text;
@end

@implementation HelloRequest

- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) _value_ {
  hasUser_ = !!_value_;
}
@synthesize user;
- (BOOL) hasText {
  return !!hasText_;
}
- (void) setHasText:(BOOL) _value_ {
  hasText_ = !!_value_;
}
@synthesize text;
- (instancetype) init {
  if ((self = [super init])) {
    self.user = @"";
    self.text = @"";
  }
  return self;
}
static HelloRequest* defaultHelloRequestInstance = nil;
+ (void) initialize {
  if (self == [HelloRequest class]) {
    defaultHelloRequestInstance = [[HelloRequest alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHelloRequestInstance;
}
- (instancetype) defaultInstance {
  return defaultHelloRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUser) {
    return NO;
  }
  if (!self.hasText) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUser) {
    [output writeString:1 value:self.user];
  }
  if (self.hasText) {
    [output writeString:2 value:self.text];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUser) {
    size_ += computeStringSize(1, self.user);
  }
  if (self.hasText) {
    size_ += computeStringSize(2, self.text);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (HelloRequest*) parseFromData:(NSData*) data {
  return (HelloRequest*)[[[HelloRequest builder] mergeFromData:data] build];
}
+ (HelloRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelloRequest*)[[[HelloRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HelloRequest*) parseFromInputStream:(NSInputStream*) input {
  return (HelloRequest*)[[[HelloRequest builder] mergeFromInputStream:input] build];
}
+ (HelloRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelloRequest*)[[[HelloRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelloRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HelloRequest*)[[[HelloRequest builder] mergeFromCodedInputStream:input] build];
}
+ (HelloRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelloRequest*)[[[HelloRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelloRequestBuilder*) builder {
  return [[HelloRequestBuilder alloc] init];
}
+ (HelloRequestBuilder*) builderWithPrototype:(HelloRequest*) prototype {
  return [[HelloRequest builder] mergeFrom:prototype];
}
- (HelloRequestBuilder*) builder {
  return [HelloRequest builder];
}
- (HelloRequestBuilder*) toBuilder {
  return [HelloRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"user", self.user];
  }
  if (self.hasText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"text", self.text];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUser) {
    [dictionary setObject: self.user forKey: @"user"];
  }
  if (self.hasText) {
    [dictionary setObject: self.text forKey: @"text"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[HelloRequest class]]) {
    return NO;
  }
  HelloRequest *otherMessage = other;
  return
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasText == otherMessage.hasText &&
      (!self.hasText || [self.text isEqual:otherMessage.text]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasText) {
    hashCode = hashCode * 31 + [self.text hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HelloRequestBuilder()
@property (strong) HelloRequest* resultHelloRequest;
@end

@implementation HelloRequestBuilder
@synthesize resultHelloRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHelloRequest = [[HelloRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHelloRequest;
}
- (HelloRequestBuilder*) clear {
  self.resultHelloRequest = [[HelloRequest alloc] init];
  return self;
}
- (HelloRequestBuilder*) clone {
  return [HelloRequest builderWithPrototype:resultHelloRequest];
}
- (HelloRequest*) defaultInstance {
  return [HelloRequest defaultInstance];
}
- (HelloRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HelloRequest*) buildPartial {
  HelloRequest* returnMe = resultHelloRequest;
  self.resultHelloRequest = nil;
  return returnMe;
}
- (HelloRequestBuilder*) mergeFrom:(HelloRequest*) other {
  if (other == [HelloRequest defaultInstance]) {
    return self;
  }
  if (other.hasUser) {
    [self setUser:other.user];
  }
  if (other.hasText) {
    [self setText:other.text];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HelloRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HelloRequestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUser:[input readString]];
        break;
      }
      case 18: {
        [self setText:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUser {
  return resultHelloRequest.hasUser;
}
- (NSString*) user {
  return resultHelloRequest.user;
}
- (HelloRequestBuilder*) setUser:(NSString*) value {
  resultHelloRequest.hasUser = YES;
  resultHelloRequest.user = value;
  return self;
}
- (HelloRequestBuilder*) clearUser {
  resultHelloRequest.hasUser = NO;
  resultHelloRequest.user = @"";
  return self;
}
- (BOOL) hasText {
  return resultHelloRequest.hasText;
}
- (NSString*) text {
  return resultHelloRequest.text;
}
- (HelloRequestBuilder*) setText:(NSString*) value {
  resultHelloRequest.hasText = YES;
  resultHelloRequest.text = value;
  return self;
}
- (HelloRequestBuilder*) clearText {
  resultHelloRequest.hasText = NO;
  resultHelloRequest.text = @"";
  return self;
}
@end

@interface HelloResponse ()
@property SInt32 retcode;
@property (strong) NSString* errmsg;
@end

@implementation HelloResponse

- (BOOL) hasRetcode {
  return !!hasRetcode_;
}
- (void) setHasRetcode:(BOOL) _value_ {
  hasRetcode_ = !!_value_;
}
@synthesize retcode;
- (BOOL) hasErrmsg {
  return !!hasErrmsg_;
}
- (void) setHasErrmsg:(BOOL) _value_ {
  hasErrmsg_ = !!_value_;
}
@synthesize errmsg;
- (instancetype) init {
  if ((self = [super init])) {
    self.retcode = 0;
    self.errmsg = @"";
  }
  return self;
}
static HelloResponse* defaultHelloResponseInstance = nil;
+ (void) initialize {
  if (self == [HelloResponse class]) {
    defaultHelloResponseInstance = [[HelloResponse alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHelloResponseInstance;
}
- (instancetype) defaultInstance {
  return defaultHelloResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasRetcode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRetcode) {
    [output writeInt32:1 value:self.retcode];
  }
  if (self.hasErrmsg) {
    [output writeString:2 value:self.errmsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRetcode) {
    size_ += computeInt32Size(1, self.retcode);
  }
  if (self.hasErrmsg) {
    size_ += computeStringSize(2, self.errmsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (HelloResponse*) parseFromData:(NSData*) data {
  return (HelloResponse*)[[[HelloResponse builder] mergeFromData:data] build];
}
+ (HelloResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelloResponse*)[[[HelloResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (HelloResponse*) parseFromInputStream:(NSInputStream*) input {
  return (HelloResponse*)[[[HelloResponse builder] mergeFromInputStream:input] build];
}
+ (HelloResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelloResponse*)[[[HelloResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelloResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (HelloResponse*)[[[HelloResponse builder] mergeFromCodedInputStream:input] build];
}
+ (HelloResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (HelloResponse*)[[[HelloResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HelloResponseBuilder*) builder {
  return [[HelloResponseBuilder alloc] init];
}
+ (HelloResponseBuilder*) builderWithPrototype:(HelloResponse*) prototype {
  return [[HelloResponse builder] mergeFrom:prototype];
}
- (HelloResponseBuilder*) builder {
  return [HelloResponse builder];
}
- (HelloResponseBuilder*) toBuilder {
  return [HelloResponse builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRetcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"retcode", [NSNumber numberWithInteger:self.retcode]];
  }
  if (self.hasErrmsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"errmsg", self.errmsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRetcode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.retcode] forKey: @"retcode"];
  }
  if (self.hasErrmsg) {
    [dictionary setObject: self.errmsg forKey: @"errmsg"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[HelloResponse class]]) {
    return NO;
  }
  HelloResponse *otherMessage = other;
  return
      self.hasRetcode == otherMessage.hasRetcode &&
      (!self.hasRetcode || self.retcode == otherMessage.retcode) &&
      self.hasErrmsg == otherMessage.hasErrmsg &&
      (!self.hasErrmsg || [self.errmsg isEqual:otherMessage.errmsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRetcode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.retcode] hash];
  }
  if (self.hasErrmsg) {
    hashCode = hashCode * 31 + [self.errmsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HelloResponseBuilder()
@property (strong) HelloResponse* resultHelloResponse;
@end

@implementation HelloResponseBuilder
@synthesize resultHelloResponse;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHelloResponse = [[HelloResponse alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHelloResponse;
}
- (HelloResponseBuilder*) clear {
  self.resultHelloResponse = [[HelloResponse alloc] init];
  return self;
}
- (HelloResponseBuilder*) clone {
  return [HelloResponse builderWithPrototype:resultHelloResponse];
}
- (HelloResponse*) defaultInstance {
  return [HelloResponse defaultInstance];
}
- (HelloResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (HelloResponse*) buildPartial {
  HelloResponse* returnMe = resultHelloResponse;
  self.resultHelloResponse = nil;
  return returnMe;
}
- (HelloResponseBuilder*) mergeFrom:(HelloResponse*) other {
  if (other == [HelloResponse defaultInstance]) {
    return self;
  }
  if (other.hasRetcode) {
    [self setRetcode:other.retcode];
  }
  if (other.hasErrmsg) {
    [self setErrmsg:other.errmsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HelloResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HelloResponseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRetcode:[input readInt32]];
        break;
      }
      case 18: {
        [self setErrmsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRetcode {
  return resultHelloResponse.hasRetcode;
}
- (SInt32) retcode {
  return resultHelloResponse.retcode;
}
- (HelloResponseBuilder*) setRetcode:(SInt32) value {
  resultHelloResponse.hasRetcode = YES;
  resultHelloResponse.retcode = value;
  return self;
}
- (HelloResponseBuilder*) clearRetcode {
  resultHelloResponse.hasRetcode = NO;
  resultHelloResponse.retcode = 0;
  return self;
}
- (BOOL) hasErrmsg {
  return resultHelloResponse.hasErrmsg;
}
- (NSString*) errmsg {
  return resultHelloResponse.errmsg;
}
- (HelloResponseBuilder*) setErrmsg:(NSString*) value {
  resultHelloResponse.hasErrmsg = YES;
  resultHelloResponse.errmsg = value;
  return self;
}
- (HelloResponseBuilder*) clearErrmsg {
  resultHelloResponse.hasErrmsg = NO;
  resultHelloResponse.errmsg = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
